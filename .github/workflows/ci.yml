name: CI

on:
  push:
    branches: [ main ]
    paths:
      - "api/**"
      - "web/**"
      - "docs/api/**"
      - ".github/workflows/**"
  pull_request:
    paths:
      - "api/**"
      - "web/**"
      - "docs/api/**"
      - ".github/workflows/**"
  workflow_dispatch:

jobs:
  openapi:
    name: OpenAPI lint
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with: { node-version: "20" }
      - run: npx -y @redocly/cli@1.29.0 lint docs/api/openapi.yaml

  openapi_breaking:
    name: OpenAPI breaking-change gate
    runs-on: self-hosted
    if: github.event_name == 'pull_request'
    needs: [openapi]
    steps:
      - uses: actions/checkout@v5
        with: { fetch-depth: 0 }
      - run: cp docs/api/openapi.yaml openapi.new.yaml
      - uses: actions/checkout@v5
        with:
          ref: ${{ github.base_ref }}
          path: base
      - id: check
        shell: bash
        run: |
          if [ -f base/docs/api/openapi.yaml ]; then
            echo "skip=false" >> "$GITHUB_OUTPUT"
            cp base/docs/api/openapi.yaml openapi.old.yaml
          else
            echo "skip=true" >> "$GITHUB_OUTPUT"
          fi
      - if: steps.check.outputs.skip != 'true'
        run: |
          docker run --rm -v "$PWD":/spec openapitools/openapi-diff:2.0.0 \
            /spec/openapi.old.yaml /spec/openapi.new.yaml \
            --fail-on-incompatible \
            --html /spec/openapi-diff.html
      - if: steps.check.outputs.skip != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: openapi-diff-report
          path: openapi-diff.html

  api_static:
    name: API static checks + audit
    runs-on: self-hosted
    needs: [openapi]
    defaults: { run: { working-directory: api } }
    steps:
      - uses: actions/checkout@v5
      - uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          extensions: mbstring, intl, pdo_mysql, pdo_sqlite, sqlite3, dom, xml, pcntl, posix, bcmath, fileinfo
          coverage: none
          tools: composer:v2
      - uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('api/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Composer validate
        run: composer validate --strict --no-check-publish
      - name: Resolve lockfile (sync with composer.json)
        run: composer update --no-interaction --prefer-dist --no-progress
      - name: Install deps
        run: composer install --no-interaction --prefer-dist
      - run: vendor/bin/pint -v
      - run: vendor/bin/phpstan analyse --memory-limit=-1
      - run: vendor/bin/psalm --no-cache --long-progress
      - name: Composer audit (prod only)
        run: composer audit --locked --no-dev

  api_tests:
    name: API tests (SQLite, PHP 8.3) + coverage
    runs-on: self-hosted
    needs: [api_static]
    strategy:
      fail-fast: false
      matrix:
        php: ["8.3"]
    defaults: { run: { working-directory: api } }
    steps:
      - uses: actions/checkout@v5
      - uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: mbstring, intl, pdo_sqlite, sqlite3
          coverage: xdebug
          tools: composer:v2
      - uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('api/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Resolve lockfile (sync with composer.json)
        run: composer update --no-interaction --prefer-dist --no-progress
      - name: Install deps
        run: composer install --no-interaction --prefer-dist
      - name: Prepare Laravel dirs
        run: |
          mkdir -p bootstrap/cache \
            storage/app storage/framework/cache storage/framework/sessions storage/framework/views \
            storage/logs database
          :> storage/logs/laravel.log
          :> database/database.sqlite
      - name: Create .env.testing
        run: |
          cat > .env.testing <<'EOF'
          APP_ENV=testing
          APP_DEBUG=false
          APP_KEY=base64:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
          DB_CONNECTION=sqlite
          DB_DATABASE=${{ github.workspace }}/api/database/database.sqlite
          CACHE_DRIVER=array
          SESSION_DRIVER=array
          QUEUE_CONNECTION=sync
          FILESYSTEM_DISK=local
          EOF
      - name: PHPUnit (ParaTest when available)
        env:
          APP_ENV: testing
          DB_CONNECTION: sqlite
          DB_DATABASE: ${{ github.workspace }}/api/database/database.sqlite
          CACHE_DRIVER: array
          SESSION_DRIVER: array
          QUEUE_CONNECTION: sync
          FILESYSTEM_DISK: local
          XDEBUG_MODE: coverage
        run: |
          if [ -x vendor/bin/paratest ]; then
            vendor/bin/paratest -p auto --runner=WrapperRunner \
              --coverage-clover clover.xml --coverage-filter app
          else
            vendor/bin/phpunit --log-junit junit.xml \
              --coverage-clover clover.xml --coverage-filter app
          fi
      - if: always()
        uses: actions/upload-artifact@v4
        with:
          name: phpunit-${{ matrix.php }}
          path: |
            api/junit.xml
            api/clover.xml
            api/storage/logs/*.log

  api_mysql:
    name: API tests (MySQL smoke, PHP 8.3)
    runs-on: self-hosted
    needs: [api_static]
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: phpgrc_test
          MYSQL_USER: phpgrc
          MYSQL_PASSWORD: secret
          MYSQL_ROOT_PASSWORD: secret
        ports: [ "3307:3306" ]
        options: >-
          --health-cmd="mysqladmin ping -uroot -psecret"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=30
    defaults: { run: { working-directory: api } }
    steps:
      - name: Docker preflight
        run: docker info
      - uses: actions/checkout@v5
      - uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          extensions: mbstring, intl, pdo_mysql
          coverage: none
          tools: composer:v2
      - name: Resolve lockfile (sync with composer.json)
        run: composer update --no-interaction --prefer-dist --no-progress
      - run: composer install --no-interaction --prefer-dist
      - name: Wait for MySQL
        run: |
          for i in {1..60}; do
            mysqladmin ping -h 127.0.0.1 -P 3307 --protocol=tcp -uroot -psecret && break
            sleep 1
          done
          mysql -h 127.0.0.1 -P 3307 -uroot -psecret -e "SELECT VERSION();"
      - name: Write .env.testing (MySQL)
        run: |
          cat > .env.testing <<'EOF'
          APP_ENV=testing
          APP_DEBUG=false
          APP_KEY=base64:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
          DB_CONNECTION=mysql
          DB_HOST=127.0.0.1
          DB_PORT=3307
          DB_DATABASE=phpgrc_test
          DB_USERNAME=phpgrc
          DB_PASSWORD=secret
          CACHE_DRIVER=array
          SESSION_DRIVER=array
          QUEUE_CONNECTION=sync
          FILESYSTEM_DISK=local
          EOF
      - name: Migrate schema
        env:
          APP_ENV: testing
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3307
          DB_DATABASE: phpgrc_test
          DB_USERNAME: phpgrc
          DB_PASSWORD: secret
        run: |
          php artisan config:clear
          php artisan migrate --force
      - name: PHPUnit (smoke)
        env:
          APP_ENV: testing
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3307
          DB_DATABASE: phpgrc_test
          DB_USERNAME: phpgrc
          DB_PASSWORD: secret
        run: vendor/bin/phpunit --testsuite=Feature --do-not-cache-result

  web:
    name: Web build + tests + coverage + audit
    runs-on: self-hosted
    needs: [openapi]
    defaults: { run: { working-directory: web } }
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm
          cache-dependency-path: web/package-lock.json
      - run: npm ci
      - run: npm run typecheck
      - run: npm run test:coverage
      - run: npm run build
      - run: npm audit --audit-level=high
      - uses: actions/upload-artifact@v4
        with:
          name: web-dist
          path: web/dist
      - if: always()
        uses: actions/upload-artifact@v4
        with:
          name: web-coverage
          path: web/coverage
