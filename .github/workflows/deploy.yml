name: Deploy to Server (Manual)

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Git ref to deploy (branch or tag)'
        required: true
        default: 'main'

jobs:
  deploy:
    name: Deploy via SSH/rsync
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Configure SSH
        run: |
          install -m 700 -d ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          # Known hosts to prevent MITM prompts
          ssh-keyscan -p "${{ secrets.SSH_PORT }}" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

      - name: Verify SSH connectivity
        run: |
          ssh -p "${{ secrets.SSH_PORT }}" "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" "echo 'CONNECTED:' $(hostname) && mkdir -p '${{ secrets.DEPLOY_PATH }}/releases' '${{ secrets.DEPLOY_PATH }}/shared'"

      - name: Rsync repository to timestamped release
        env:
          TS: ${{ github.run_id }}-${{ github.run_attempt }}
        run: |
          set -euo pipefail
          RELEASE_DIR="${{ secrets.DEPLOY_PATH }}/releases/${TS}"
          ssh -p "${{ secrets.SSH_PORT }}" "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" "mkdir -p '${RELEASE_DIR}'"
          rsync -az --delete --exclude '.git' -e "ssh -p ${{ secrets.SSH_PORT }}" ./ "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${RELEASE_DIR}/"

      - name: Update 'current' symlink (atomic)
        env:
          TS: ${{ github.run_id }}-${{ github.run_attempt }}
        run: |
          set -euo pipefail
          RELEASE_DIR="${{ secrets.DEPLOY_PATH }}/releases/${TS}"
          ssh -p "${{ secrets.SSH_PORT }}" "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" "\
            ln -sfn '${RELEASE_DIR}' '${{ secrets.DEPLOY_PATH }}/current' && \
            echo '${RELEASE_DIR}' > '${{ secrets.DEPLOY_PATH }}/LAST_DEPLOY.txt' && \
            readlink -f '${{ secrets.DEPLOY_PATH }}/current' \
          "
      - name: Prepare Laravel (server)
        env:
          TS: ${{ github.run_id }}-${{ github.run_attempt }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
          APP_URL: ${{ secrets.APP_URL }}
          APP_KEY: ${{ secrets.APP_KEY }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
        run: |
          set -euo pipefail
          : "${APP_URL:?APP_URL secret is required}"
          : "${DB_HOST:?missing}"; : "${DB_NAME:?missing}"; : "${DB_USER:?missing}"; : "${DB_PASS:?missing}"
      
          ROOT="$DEPLOY_PATH"
          RELEASE_DIR="$ROOT/releases/${TS}"
      
          ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" \
            ROOT="$ROOT" RELEASE_DIR="$RELEASE_DIR" \
            APP_URL="$APP_URL" APP_KEY="$APP_KEY" \
            DB_HOST="$DB_HOST" DB_NAME="$DB_NAME" DB_USER="$DB_USER" DB_PASS="$DB_PASS" \
            'bash -seu' <<'REMOTE'
          umask 027
          sudo mkdir -p "$ROOT/shared/storage/app/public" "$ROOT/shared/bootstrap/cache"
          sudo chown -R deploy:www-data "$ROOT/shared"
          find "$ROOT/shared/storage" -type d -exec chmod 775 {} \; || true
          chmod -R g+w "$ROOT/shared/bootstrap/cache"
      
          if [ ! -f "$ROOT/shared/api.env" ]; then
            cat > "$ROOT/shared/api.env" <<EOF
            APP_ENV=production
            APP_DEBUG=false
            APP_URL="https://phpgrc.gruntlabs.net"
            APP_KEY=${APP_KEY}
      
            LOG_CHANNEL=stack
            LOG_LEVEL=info

            CACHE_STORE=file
            SESSION_DRIVER=file
            QUEUE_CONNECTION=sync
      
            DB_CONNECTION=mysql
            DB_HOST=${DB_HOST}
            DB_PORT=3306
            DB_DATABASE=${DB_NAME}
            DB_USERNAME=${DB_USER}
            DB_PASSWORD=${DB_PASS}
            DB_SOCKET=
      
            SANCTUM_STATEFUL_DOMAINS=$(echo "${APP_URL}" | sed -E 's#https?://##;s#/$##')
            SESSION_DOMAIN=$(echo "${APP_URL}" | sed -E 's#https?://##;s#/$##')
            EOF
            sudo chown deploy:www-data "$ROOT/shared/api.env"
            chmod 640 "$ROOT/shared/api.env"
          fi
      
          ln -sfn "$ROOT/shared/api.env"  "$RELEASE_DIR/api/.env"
          rm -rf "$RELEASE_DIR/api/storage"
          ln -sfn "$ROOT/shared/storage"  "$RELEASE_DIR/api/storage"
          REMOTE