# FILE: /docs/api/openapi.yaml
openapi: 3.1.0
info:
  title: phpGRC API
  version: 0.4.6
  description: |
    Contracts for phpGRC Phase 4. Scope includes Settings, RBAC, Audit, Evidence, Exports, Avatars, and Setup.
    When `core.rbac.require_auth=true`, endpoints guarded by RBAC require authentication first (401).
    When RBAC is disabled, userâ€“role endpoints return 404 with `RBAC_DISABLED`.
servers:
  - url: /api
tags:
  - name: Health
  - name: OpenAPI
  - name: Auth
  - name: Settings
  - name: RBAC
  - name: Audit
  - name: Evidence
  - name: Exports
  - name: Avatars
  - name: Setup
paths:
  /health:
    get:
      tags: [Health]
      summary: Health probe
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required: [ok]
                properties:
                  ok: { type: boolean, const: true }

  /health/fingerprint:
    get:
      tags: [Health]
      summary: Deployment fingerprint and enabled-feature summary
      responses:
        '200':
          description: Summary and fingerprint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthFingerprintResponse'

  /openapi.yaml:
    get:
      tags: [OpenAPI]
      summary: OpenAPI YAML
      responses:
        '200':
          description: YAML
          content:
            application/yaml:
              schema: { type: string }

  /openapi.json:
    get:
      tags: [OpenAPI]
      summary: OpenAPI JSON
      responses:
        '200':
          description: JSON
          content:
            application/json:
              schema: { type: object, additionalProperties: true }

  /admin/settings:
    get:
      tags: [Settings]
      summary: Get settings snapshot
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsGetResponse'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      tags: [Settings]
      summary: Update settings (spec or legacy shape)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/SettingsUpdateSpecShape'
                - $ref: '#/components/schemas/SettingsUpdateLegacyShape'
      responses:
        '200':
          description: Applied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsPostResponse'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationFailed'
    put:
      $ref: '#/paths/~1admin~1settings/post'
    patch:
      $ref: '#/paths/~1admin~1settings/post'

  /rbac/roles:
    get:
      tags: [RBAC]
      summary: List role catalog
      responses:
        '200':
          description: OK (persist uses DB if present, else config)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleListResponse'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      tags: [RBAC]
      summary: Create role (persist) or accept (stub-only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleCreateRequest'
      responses:
        '201':
          description: Created (persist path)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleCreateResponse'
        '202':
          description: Accepted (stub-only path)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleCreateAccepted'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationFailed'

  /rbac/users/{user}/roles:
    parameters:
      - name: user
        in: path
        required: true
        schema: { type: integer, minimum: 1 }
        description: Numeric user ID.
    get:
      tags: [RBAC]
      summary: Get roles for a user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRolesResponse'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/RbacDisabled'
    put:
      tags: [RBAC]
      summary: Replace roles for a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleReplaceRequest'
      responses:
        '200':
          description: Replaced
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRolesResponse'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/RbacDisabled'
        '422':
          description: Validation failed or unknown roles
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationFailed'
                  - $ref: '#/components/schemas/RoleNotFoundError'

  /rbac/users/{user}/roles/{role}:
    parameters:
      - name: user
        in: path
        required: true
        schema: { type: integer, minimum: 1 }
      - name: role
        in: path
        required: true
        schema: { type: string, minLength: 2, maxLength: 64 }
        description: |
          Role identifier. Accepts role **name** or role **id** (e.g., `role_admin`).
          If the name contains spaces, it **must** be URL-encoded in the path segment.
    post:
      tags: [RBAC]
      summary: Attach a role to a user by name or id
      responses:
        '200':
          description: Attached (idempotent)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRolesResponse'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/RbacDisabled'
        '422':
          description: Unknown role or invalid input
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/RoleNotFoundError'
                  - $ref: '#/components/schemas/ValidationFailed'
    delete:
      tags: [RBAC]
      summary: Detach a role from a user by name or id
      responses:
        '200':
          description: Detached (idempotent)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRolesResponse'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/RbacDisabled'
        '422':
          description: Unknown role or invalid input
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/RoleNotFoundError'
                  - $ref: '#/components/schemas/ValidationFailed'

  /audit:
    get:
      tags: [Audit]
      summary: List audit events
      parameters:
        - { $ref: '#/components/parameters/AuditCategory' }
        - { $ref: '#/components/parameters/AuditAction' }
        - { $ref: '#/components/parameters/OccurredFrom' }
        - { $ref: '#/components/parameters/OccurredTo' }
        - { $ref: '#/components/parameters/ActorId' }
        - { $ref: '#/components/parameters/EntityType' }
        - { $ref: '#/components/parameters/EntityId' }
        - { $ref: '#/components/parameters/AuditIp' }
        - { $ref: '#/components/parameters/Order' }
        - { $ref: '#/components/parameters/Limit' }
        - { $ref: '#/components/parameters/Cursor' }
      responses:
        '200':
          description: OK (persist or stub path)
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/AuditListResponse'
                  - $ref: '#/components/schemas/AuditListStubResponse'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'

  /audit/categories:
    get:
      tags: [Audit]
      summary: List audit categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required: [ok, categories]
                properties:
                  ok: { type: boolean, const: true }
                  categories:
                    type: array
                    items:
                      type: string
                      enum: [SYSTEM, RBAC, AUTH, SETTINGS, EXPORTS, EVIDENCE, AVATARS, AUDIT]
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'

  /audit/export.csv:
    get:
      tags: [Audit]
      summary: Export audit events as CSV
      parameters:
        - { $ref: '#/components/parameters/AuditCategory' }
        - { $ref: '#/components/parameters/AuditAction' }
        - { $ref: '#/components/parameters/OccurredFrom' }
        - { $ref: '#/components/parameters/OccurredTo' }
        - { $ref: '#/components/parameters/ActorId' }
        - { $ref: '#/components/parameters/EntityType' }
        - { $ref: '#/components/parameters/EntityId' }
        - { $ref: '#/components/parameters/AuditIp' }
        - { $ref: '#/components/parameters/Order' }
      responses:
        '200':
          description: CSV file
          content:
            text/csv:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'

  /evidence:
    get:
      tags: [Evidence]
      summary: List evidence items
      parameters:
        - name: owner_id
          in: query
          schema: { type: integer, minimum: 1 }
        - name: filename
          in: query
          schema: { type: string }
        - name: mime
          in: query
          schema: { type: string }
        - name: sha256
          in: query
          schema: { type: string, pattern: '^[A-Fa-f0-9]{64}$' }
        - name: sha256_prefix
          in: query
          schema: { type: string, minLength: 6, maxLength: 64, pattern: '^[A-Fa-f0-9]+$' }
        - name: version_from
          in: query
          schema: { type: integer, minimum: 1 }
        - name: version_to
          in: query
          schema: { type: integer, minimum: 1 }
        - name: created_from
          in: query
          schema: { type: string, format: date-time }
        - name: created_to
          in: query
          schema: { type: string, format: date-time }
        - { $ref: '#/components/parameters/Order' }
        - { $ref: '#/components/parameters/Limit' }
        - { $ref: '#/components/parameters/Cursor' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvidenceListResponse'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      tags: [Evidence]
      summary: Upload evidence
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EvidenceUploadRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvidenceCreateResponse'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationFailed'

  /evidence/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: string, minLength: 2 }
    get:
      tags: [Evidence]
      summary: Download evidence
      parameters:
        - name: sha256
          in: query
          required: false
          schema: { type: string, pattern: '^[A-Fa-f0-9]{64}$' }
      responses:
        '200':
          description: File
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '304':
          description: Not Modified
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Not Found
        '412':
          description: EVIDENCE_HASH_MISMATCH
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
    head:
      tags: [Evidence]
      summary: HEAD same as GET without body
      responses:
        '200':
          description: Headers only
        '304':
          description: Not Modified
        '404':
          description: Not Found

  /exports:
    post:
      tags: [Exports]
      summary: Create export (legacy)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportCreateLegacyRequest'
      responses:
        '200':
          description: Created/Queued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportCreateResponse'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationFailed'

  /exports/{type}:
    post:
      tags: [Exports]
      summary: Create export by type
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum: [csv, json, pdf]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportCreateTypeRequest'
      responses:
        '200':
          description: Created/Queued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportCreateResponse'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationFailed'

  /exports/{jobId}/status:
    get:
      tags: [Exports]
      summary: Export job status
      parameters:
        - name: jobId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportStatusResponse'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'

  /exports/{jobId}/download:
    get:
      tags: [Exports]
      summary: Download export artifact
      parameters:
        - name: jobId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: File
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: EXPORT_NOT_FOUND or artifact missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'

  /avatar:
    post:
      tags: [Avatars]
      summary: Upload user avatar (Phase 4 stub)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '202':
          description: Accepted (stub-only)
          content:
            application/json:
              schema:
                type: object
                required: [ok, note]
                properties:
                  ok: { type: boolean, const: true }
                  note: { type: string, const: stub-only }
        '400':
          description: AVATAR_NOT_ENABLED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
        '422':
          description: AVATAR_VALIDATION_FAILED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'

  /avatar/{user}:
    parameters:
      - name: user
        in: path
        required: true
        schema: { type: integer, minimum: 1 }
    get:
      tags: [Avatars]
      summary: Get avatar image
      parameters:
        - name: size
          in: query
          schema: { type: integer, enum: [32, 64, 128], default: 128 }
      responses:
        '200':
          description: WEBP image
          content:
            image/webp:
              schema:
                type: string
                format: binary
        '400':
          description: AVATAR_NOT_ENABLED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
        '404':
          description: AVATAR_NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
    head:
      tags: [Avatars]
      summary: HEAD avatar
      responses:
        '200':
          description: Headers only
        '404':
          description: Not Found

  /setup/status:
    get:
      tags: [Setup]
      summary: Setup wizard status
      responses:
        '200':
          description: Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetupStatusResponse'

  /setup/db/test:
    post:
      tags: [Setup]
      summary: Test database connection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetupDbTestRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Ok' }
        '422':
          description: DB_CONFIG_INVALID
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorSimple' }

  /setup/db/write:
    post:
      tags: [Setup]
      summary: Write DB config to shared path
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetupDbWriteRequest'
      responses:
        '200':
          description: Wrote config
          content:
            application/json:
              schema:
                type: object
                required: [ok, path]
                properties:
                  ok: { type: boolean, const: true }
                  path: { type: string }
        '400':
          description: SETUP_STEP_DISABLED
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorSimple' }

  /setup/app-key:
    post:
      tags: [Setup]
      summary: Generate app key (stub if commands disabled)
      responses:
        '200':
          description: Generated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Ok' }
        '202':
          description: Stub-only
          content:
            application/json:
              schema:
                type: object
                required: [ok, note]
                properties:
                  ok: { type: boolean, const: true }
                  note: { type: string, const: stub-only }
        '409':
          description: APP_KEY_EXISTS
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorSimple' }

  /setup/schema/init:
    post:
      tags: [Setup]
      summary: Run migrations (stub if commands disabled)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Ok' }
        '202':
          description: Stub-only
          content:
            application/json:
              schema:
                type: object
                required: [ok, note]
                properties:
                  ok: { type: boolean, const: true }
                  note: { type:string, const: stub-only }
        '500':
          description: SCHEMA_INIT_FAILED
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorSimple' }

  /setup/admin:
    post:
      tags: [Setup]
      summary: Create first admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetupAdminRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Ok' }
        '409':
          description: ADMIN_EXISTS
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorSimple' }

  /setup/admin/totp/verify:
    post:
      tags: [Setup]
      summary: Verify admin TOTP during setup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [code]
              properties:
                code: { type: string, minLength: 6, maxLength: 8 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Ok' }
        '400':
          description: TOTP_CODE_INVALID
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorSimple' }

  /setup/smtp:
    post:
      tags: [Setup]
      summary: Configure SMTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Ok' }
        '422':
          description: SMTP validation failed
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorSimple' }

  /setup/idp:
    post:
      tags: [Setup]
      summary: Configure Identity Provider (optional)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Ok' }
        '400':
          description: IDP_UNSUPPORTED
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorSimple' }

  /setup/branding:
    post:
      tags: [Setup]
      summary: Configure branding
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Ok' }
        '422':
          description: BRANDING_INVALID
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorSimple' }

  /setup/finish:
    post:
      tags: [Setup]
      summary: Complete setup wizard
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Ok' }

components:
  securitySchemes:
    sanctum:
      type: http
      scheme: bearer
      bearerFormat: Token

  parameters:
    AuditCategory:
      name: category
      in: query
      schema:
        type: string
        enum: [SYSTEM, RBAC, AUTH, SETTINGS, EXPORTS, EVIDENCE, AVATARS, AUDIT]
    AuditAction:
      name: action
      in: query
      schema: { type: string, maxLength: 191 }
    OccurredFrom:
      name: occurred_from
      in: query
      schema: { type: string, format: date-time }
    OccurredTo:
      name: occurred_to
      in: query
      schema: { type: string, format: date-time }
    ActorId:
      name: actor_id
      in: query
      schema: { type: integer, minimum: 1 }
    EntityType:
      name: entity_type
      in: query
      schema: { type: string, maxLength: 128 }
    EntityId:
      name: entity_id
      in: query
      schema: { type: string, maxLength: 191 }
    AuditIp:
      name: ip
      in: query
      schema: { type: string, format: ipv4 }
    Order:
      name: order
      in: query
      schema: { type: string, enum: [asc, desc], default: desc }
    Limit:
      name: limit
      in: query
      schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
    Cursor:
      name: cursor
      in: query
      schema: { type: string, nullable: true }

  responses:
    Unauthenticated:
      description: Unauthenticated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Unauthenticated'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ForbiddenError'
    ValidationFailed:
      description: Validation errors
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationFailed'
    RbacDisabled:
      description: RBAC disabled
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RbacDisabledError'

  schemas:
    Ok:
      type: object
      required: [ok]
      properties:
        ok: { type: boolean, const: true }

    ErrorSimple:
      type: object
      required: [ok, code]
      properties:
        ok: { type: boolean, const: false }
        code: { type: string }
        message: { type: string, nullable: true }
        note: { type: string, nullable: true }

    Unauthenticated:
      allOf:
        - $ref: '#/components/schemas/ErrorSimple'
        - type: object
          properties:
            code:
              type: string
              enum: [UNAUTHENTICATED]

    ForbiddenError:
      allOf:
        - $ref: '#/components/schemas/ErrorSimple'
        - type: object
          properties:
            code:
              type: string
              enum: [UNAUTHORIZED]

    ValidationFailed:
      type: object
      required: [ok, code, message, errors]
      properties:
        ok: { type: boolean, const: false }
        code:
          type: string
          enum: [VALIDATION_FAILED]
        message: { type: string }
        errors:
          type: object
          additionalProperties:
            type: array
            items: { type: string }

    RoleNotFoundError:
      type: object
      required: [ok, code, missing_roles]
      properties:
        ok: { type: boolean, const: false }
        code:
          type: string
          enum: [ROLE_NOT_FOUND]
        missing_roles:
          type: array
          items: { type: string, minLength: 2, maxLength: 64 }
      example:
        ok: false
        code: ROLE_NOT_FOUND
        missing_roles: ["NopeRole"]

    RbacDisabledError:
      type: object
      required: [ok, code]
      properties:
        ok: { type: boolean, const: false }
        code:
          type: string
          enum: [RBAC_DISABLED]

    RoleListResponse:
      type: object
      required: [ok, roles]
      properties:
        ok: { type: boolean, const: true }
        roles:
          type: array
          items: { type: string, minLength: 2, maxLength: 64 }

    RoleCreateRequest:
      type: object
      required: [name]
      properties:
        name: { type: string, minLength: 2, maxLength: 64 }

    RoleCreateResponse:
      type: object
      required: [ok, role]
      properties:
        ok: { type: boolean, const: true }
        role:
          type: object
          required: [id, name]
          properties:
            id: { type: string, pattern: '^role_[a-z0-9_]+(_[0-9]+)?$' }
            name: { type: string, minLength: 2, maxLength: 64 }

    RoleCreateAccepted:
      type: object
      required: [ok, note, accepted]
      properties:
        ok: { type: boolean, const: false }
        note: { type: string, const: stub-only }
        accepted:
          $ref: '#/components/schemas/RoleCreateRequest'

    User:
      type: object
      required: [id, name, email]
      properties:
        id: { type: integer, minimum: 1 }
        name: { type: string }
        email: { type: string, format: email }

    UserRolesResponse:
      type: object
      required: [ok, user, roles]
      properties:
        ok: { type: boolean, const: true }
        user: { $ref: '#/components/schemas/User' }
        roles:
          type: array
          items: { type: string, minLength: 2, maxLength: 64 }

    RoleReplaceRequest:
      type: object
      required: [roles]
      properties:
        roles:
          type: array
          items: { type: string, minLength: 2, maxLength: 64 }
          description: Role names or ids. Duplicates after normalization are rejected.

    AuditEvent:
      type: object
      required: [id, occurred_at, action, category, entity_type, entity_id]
      properties:
        id: { type: string }
        occurred_at: { type: string, format: date-time }
        actor_id: { type: integer, nullable: true }
        action: { type: string }
        category:
          type: string
          enum: [SYSTEM, RBAC, AUTH, SETTINGS, EXPORTS, EVIDENCE, AVATARS, AUDIT]
        entity_type: { type: string }
        entity_id: { type: string }
        ip: { type: string, nullable: true }
        ua: { type: string, nullable: true }
        meta: { type: object, nullable: true, additionalProperties: true }

    AuditListResponse:
      type: object
      required: [ok, _categories, _retention_days, filters, items]
      properties:
        ok: { type: boolean, const: true }
        _categories:
          type: array
          items:
            type: string
            enum: [SYSTEM, RBAC, AUTH, SETTINGS, EXPORTS, EVIDENCE, AVATARS, AUDIT]
        _retention_days: { type: integer, minimum: 30, maximum: 730 }
        filters:
          type: object
          additionalProperties: true
        items:
          type: array
          items: { $ref: '#/components/schemas/AuditEvent' }
        nextCursor: { type: string, nullable: true }

    AuditListStubResponse:
      allOf:
        - $ref: '#/components/schemas/AuditListResponse'
        - type: object
          required: [note]
          properties:
            note: { type: string, const: stub-only }

    EvidenceListResponse:
      type: object
      required: [ok, data]
      properties:
        ok: { type: boolean, const: true }
        filters:
          type: object
          additionalProperties: true
        data:
          type: array
          items:
            type: object
            additionalProperties: true
        next_cursor: { type: string, nullable: true }

    EvidenceUploadRequest:
      type: object
      required: [file]
      properties:
        file:
          type: string
          format: binary

    EvidenceCreateResponse:
      type: object
      required: [ok]
      properties:
        ok: { type: boolean, const: true }
        id: { type: string }
        sha256: { type: string }
        mime: { type: string }
        size_bytes: { type: integer }

    ExportCreateLegacyRequest:
      type: object
      required: [type]
      properties:
        type: { type: string, enum: [csv, json, pdf] }
        params: { type: object, additionalProperties: true }

    ExportCreateTypeRequest:
      type: object
      properties:
        params: { type: object, additionalProperties: true }

    ExportCreateResponse:
      type: object
      required: [ok, jobId, type]
      properties:
        ok: { type: boolean, const: true }
        jobId: { type: string }
        type: { type: string, enum: [csv, json, pdf] }
        note: { type: string, nullable: true }

    ExportStatusResponse:
      type: object
      required: [ok, status]
      properties:
        ok: { type: boolean, const: true }
        status: { type: string, enum: [queued, running, done, failed] }

    SettingsGetResponse:
      type: object
      required: [ok, config]
      properties:
        ok: { type: boolean, const: true }
        config:
          type: object
          properties:
            core:
              type: object
              properties:
                rbac:
                  type: object
                  properties:
                    enabled: { type: boolean }
                    require_auth: { type: boolean }
                    roles:
                      type: array
                      items: { type: string }
                audit:
                  type: object
                  properties:
                    enabled: { type: boolean }
                    retention_days: { type: integer }
                evidence:
                  type: object
                  properties:
                    enabled: { type: boolean }
                    max_mb: { type: integer }
                    allowed_mime:
                      type: array
                      items: { type: string }
                avatars:
                  type: object
                  properties:
                    enabled: { type: boolean }
                    size_px: { type: integer }
                    format: { type: string }

    SettingsUpdateSpecShape:
      type: object
      properties:
        rbac:
          type: object
          properties:
            enabled: { type: boolean }
            require_auth: { type: boolean }
            roles:
              type: array
              items: { type: string }
        audit:
          type: object
          properties:
            enabled: { type: boolean }
            retention_days: { type: integer }
        evidence:
          type: object
          properties:
            enabled: { type: boolean }
            max_mb: { type: integer }
            allowed_mime:
              type: array
              items: { type: string }
        avatars:
          type: object
          properties:
            enabled: { type: boolean }
            size_px: { type: integer }
            format: { type: string }

    SettingsUpdateLegacyShape:
      type: object
      properties:
        core:
          $ref: '#/components/schemas/SettingsUpdateSpecShape'

    SettingsPostResponse:
      type: object
      required: [ok]
      properties:
        ok: { type: boolean, const: true }
        applied: { type: boolean, nullable: true }
        changes:
          type: object
          additionalProperties: true
        config:
          $ref: '#/components/schemas/SettingsGetResponse/properties/config'

    HealthFingerprintResponse:
      type: object
      required: [ok, fingerprint, overlay, summary]
      properties:
        ok: { type: boolean, const: true }
        fingerprint: { type: string }
        overlay:
          type: object
          properties:
            loaded: { type: boolean }
            path: { type: string, nullable: true }
            mtime: { type: string, nullable: true }
        summary:
          type: object
          properties:
            rbac:
              type: object
              properties:
                enabled: { type: boolean }
                require_auth: { type: boolean }
                roles_count: { type: integer }
            audit:
              type: object
              properties:
                enabled: { type: boolean }
                retention_days: { type: integer }
            evidence:
              type: object
              properties:
                enabled: { type: boolean }
                max_mb: { type: integer }
                allowed_mime_count: { type: integer }
            avatars:
              type: object
              properties:
                enabled: { type: boolean }
                size_px: { type: integer }
                format: { type: string }

    SetupStatusResponse:
      type: object
      required: [ok, setupComplete, nextStep, checks]
      properties:
        ok: { type: boolean, const: true }
        setupComplete: { type: boolean }
        nextStep:
          type: string
          nullable: true
          enum: [db_config, app_key, schema_init, admin_seed, admin_mfa_verify, null]
        checks:
          type: object
          properties:
            db_config: { type: boolean }
            app_key: { type: boolean }
            schema_init: { type: boolean }
            admin_seed: { type: boolean }
            admin_mfa_verify: { type: boolean }
            smtp: { type: boolean }
            idp: { type: boolean }
            branding: { type: boolean }

    SetupDbTestRequest:
      type: object
      required: [driver, host, port, database, username, password]
      properties:
        driver: { type: string, enum: [mysql, pgsql, sqlite, sqlsrv] }
        host: { type: string }
        port: { type: integer }
        database: { type: string }
        username: { type: string }
        password: { type: string }

    SetupDbWriteRequest:
      allOf:
        - $ref: '#/components/schemas/SetupDbTestRequest'

    SetupAdminRequest:
      type: object
      required: [name, email, password, password_confirmation]
      properties:
        name: { type: string, minLength: 2 }
        email: { type: string, format: email }
        password: { type: string, minLength: 8 }
        password_confirmation: { type: string, minLength: 8 }
