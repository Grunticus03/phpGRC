openapi: 3.1.0
info:
  title: phpGRC API
  version: 0.4.6
  license:
    identifier: MIT
    name: MIT
  description: |
    OpenAPI 3.1 for phpGRC Phase 4.
    Contracts mirror current routes and response shapes.
servers:
  - url: /api
security: []
tags:
  - name: Health
    description: Liveness and readiness checks
  - name: Spec
    description: API specification endpoints
  - name: Docs
    description: Embedded Swagger UI
  - name: Auth
    description: Authentication and MFA
  - name: Setup
    description: First-run setup wizard and bootstrapping
  - name: Admin Settings
    description: Core configuration management
  - name: RBAC
    description: Role-based access control
  - name: Audit
    description: Audit trail viewing and export
  - name: Evidence
    description: Evidence upload and retrieval
  - name: Exports
    description: Bulk export jobs
  - name: Avatars
    description: User avatar upload and fetch

paths:
  /health:
    get:
      tags: [Health]
      summary: Health check
      description: Returns ok:true to indicate liveness.
      operationId: health
      responses:
        '200': { $ref: '#/components/responses/Ok' }
        '400': { description: Bad request }

  /openapi.yaml:
    get:
      tags: [Spec]
      summary: Serve OpenAPI YAML
      description: Returns this OpenAPI document as YAML.
      operationId: serveOpenApiYaml
      responses:
        '200':
          description: YAML document
          content:
            application/yaml:
              schema:
                type: string
        '404': { $ref: '#/components/responses/NotFound' }

  /docs:
    get:
      tags: [Docs]
      summary: Swagger UI
      description: Serves an embedded Swagger UI that loads /api/openapi.yaml.
      operationId: swaggerUi
      responses:
        '200':
          description: HTML page containing Swagger UI
          content:
            text/html:
              schema:
                type: string
        '404': { $ref: '#/components/responses/NotFound' }

  # ---------------------------
  # Setup Wizard (first-run)
  # ---------------------------
  /setup/status:
    get:
      tags: [Setup]
      summary: Setup status
      description: Reports current setup state and remaining steps.
      operationId: setupStatus
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        '403': { $ref: '#/components/responses/Forbidden' }

  /setup/db/test:
    post:
      tags: [Setup]
      summary: Test database connectivity
      description: Attempts to connect using provided parameters.
      operationId: setupDbTest
      responses:
        '200': { $ref: '#/components/responses/Ok' }
        '422':
          description: Validation failed
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error422' }
        '403': { $ref: '#/components/responses/Forbidden' }

  /setup/db/write:
    post:
      tags: [Setup]
      summary: Persist database config to shared path
      description: Writes validated DB configuration.
      operationId: setupDbWrite
      responses:
        '200': { $ref: '#/components/responses/Ok' }
        '422':
          description: Validation failed
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error422' }
        '403': { $ref: '#/components/responses/Forbidden' }

  /setup/app-key:
    post:
      tags: [Setup]
      summary: Generate app key
      description: Generates and persists the Laravel application key.
      operationId: setupAppKey
      responses:
        '200': { $ref: '#/components/responses/Ok' }
        '403': { $ref: '#/components/responses/Forbidden' }

  /setup/schema/init:
    post:
      tags: [Setup]
      summary: Initialize application schema
      description: Runs migrations and initializes schema.
      operationId: setupSchemaInit
      responses:
        '200': { $ref: '#/components/responses/Ok' }
        '403': { $ref: '#/components/responses/Forbidden' }

  /setup/admin:
    post:
      tags: [Setup]
      summary: Create initial admin user
      description: Creates the first admin account.
      operationId: setupAdminCreate
      responses:
        '201': { description: Created }
        '422':
          description: Validation failed
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error422' }
        '403': { $ref: '#/components/responses/Forbidden' }

  /setup/admin/totp/verify:
    post:
      tags: [Setup]
      summary: Verify admin TOTP after enrollment
      description: Verifies the TOTP code for the initial admin.
      operationId: setupAdminTotpVerify
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                code: { type: string, minLength: 6, maxLength: 8 }
              required: [code]
      responses:
        '200': { $ref: '#/components/responses/Ok' }
        '400': { description: Invalid TOTP }
        '403': { $ref: '#/components/responses/Forbidden' }

  /setup/smtp:
    post:
      tags: [Setup]
      summary: Save SMTP settings
      description: Persists mail transport settings and optionally sends a test message.
      operationId: setupSmtp
      responses:
        '200': { $ref: '#/components/responses/Ok' }
        '422':
          description: Validation failed
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error422' }
        '403': { $ref: '#/components/responses/Forbidden' }

  /setup/idp:
    post:
      tags: [Setup]
      summary: Save IdP settings
      description: Persists identity provider configuration for SSO.
      operationId: setupIdp
      responses:
        '200': { $ref: '#/components/responses/Ok' }
        '422':
          description: Validation failed
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error422' }
        '403': { $ref: '#/components/responses/Forbidden' }

  /setup/branding:
    post:
      tags: [Setup]
      summary: Save branding
      description: Saves product name, theme, and optional logo URL.
      operationId: setupBranding
      responses:
        '200': { $ref: '#/components/responses/Ok' }
        '422':
          description: Validation failed
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error422' }
        '403': { $ref: '#/components/responses/Forbidden' }

  /setup/finish:
    post:
      tags: [Setup]
      summary: Mark setup complete
      description: Finalizes setup and enables normal operation.
      operationId: setupFinish
      responses:
        '200': { $ref: '#/components/responses/Ok' }
        '403': { $ref: '#/components/responses/Forbidden' }

  # ---------------------------
  # Auth
  # ---------------------------
  /auth/login:
    post:
      tags: [Auth]
      summary: Login
      description: Authenticates a user using email and password.
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                email: { type: string, format: email }
                password: { type: string, minLength: 1 }
              required: [email, password]
      responses:
        '200': { $ref: '#/components/responses/Ok' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /auth/logout:
    post:
      tags: [Auth]
      summary: Logout
      description: Invalidates the current session or token.
      operationId: logout
      responses:
        '200': { $ref: '#/components/responses/Ok' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /auth/me:
    get:
      tags: [Auth]
      summary: Current user
      description: Returns the authenticated user profile.
      operationId: me
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  ok: { type: boolean }
                  user:
                    type: object
                    additionalProperties: false
                    properties:
                      id: { type: integer }
                      name: { type: string }
                      email: { type: string, format: email }
                    required: [id, name, email]
                required: [ok, user]
        '401': { $ref: '#/components/responses/Unauthorized' }

  /auth/totp/enroll:
    post:
      tags: [Auth]
      summary: Enroll TOTP
      description: Starts TOTP enrollment for the authenticated user.
      operationId: totpEnroll
      responses:
        '200': { $ref: '#/components/responses/Ok' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /auth/totp/verify:
    post:
      tags: [Auth]
      summary: Verify TOTP
      description: Verifies a one-time TOTP code for the authenticated user.
      operationId: totpVerify
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                code: { type: string, minLength: 6, maxLength: 8 }
              required: [code]
      responses:
        '200': { $ref: '#/components/responses/Ok' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /auth/break-glass:
    post:
      tags: [Auth]
      summary: Break-glass login
      description: Emergency access path when normal auth is unavailable.
      operationId: breakGlass
      responses:
        '200': { $ref: '#/components/responses/Ok' }
        '403': { $ref: '#/components/responses/Forbidden' }

  # ---------------------------
  # Admin Settings (RBAC enforced)
  # ---------------------------
  /admin/settings:
    get:
      tags: [Admin Settings]
      summary: Read effective core settings
      description: Returns the effective core configuration.
      operationId: adminSettingsIndex
      security:
        - bearerAuth: []
        - {}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SettingsEnvelope' }
        '403': { $ref: '#/components/responses/Forbidden' }
    post:
      tags: [Admin Settings]
      summary: Validate and optionally persist core settings
      description: Validates settings; persists only when apply=true and persistence is available.
      operationId: adminSettingsUpdate
      security:
        - bearerAuth: []
        - {}
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SettingsPost' }
      responses:
        '200': { $ref: '#/components/responses/Ok' }
        '422':
          description: Validation failed
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error422' }
        '403': { $ref: '#/components/responses/Forbidden' }
    put:
      tags: [Admin Settings]
      summary: Validate and optionally persist core settings
      description: Same semantics as POST /admin/settings.
      operationId: adminSettingsPut
      security:
        - bearerAuth: []
        - {}
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SettingsPost' }
      responses:
        '200': { $ref: '#/components/responses/Ok' }
        '422':
          description: Validation failed
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error422' }
        '403': { $ref: '#/components/responses/Forbidden' }
    patch:
      tags: [Admin Settings]
      summary: Validate and optionally persist core settings
      description: Same semantics as POST /admin/settings.
      operationId: adminSettingsPatch
      security:
        - bearerAuth: []
        - {}
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SettingsPost' }
      responses:
        '200': { $ref: '#/components/responses/Ok' }
        '422':
          description: Validation failed
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error422' }
        '403': { $ref: '#/components/responses/Forbidden' }

  # ---------------------------
  # RBAC
  # ---------------------------
  /rbac/roles:
    get:
      tags: [RBAC]
      summary: List roles
      description: Lists available roles from config or database depending on mode.
      operationId: rbacListRoles
      security:
        - bearerAuth: []
        - {}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/RoleList' }
        '403': { $ref: '#/components/responses/Forbidden' }
    post:
      tags: [RBAC]
      summary: Create role
      description: Creates a new role when persistence is enabled; returns stub otherwise.
      operationId: rbacCreateRole
      security:
        - bearerAuth: []
        - {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                name: { type: string, minLength: 2, maxLength: 64 }
              required: [name]
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  role:
                    type: object
                    properties:
                      id: { type: string }
                      name: { type: string }
                    required: [id, name]
                required: [ok, role]
        '202':
          description: Accepted (stub-only)
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  note: { type: string }
                  accepted:
                    type: object
                    properties:
                      name: { type: string }
                    required: [name]
                required: [ok, note, accepted]
        '403': { $ref: '#/components/responses/Forbidden' }
        '422':
          description: Validation failed
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error422' }

  /rbac/users/{user}/roles:
    parameters:
      - in: path
        name: user
        required: true
        schema: { type: integer, minimum: 1 }
    get:
      tags: [RBAC]
      summary: Get roles for user
      description: Returns the roles assigned to a specific user.
      operationId: rbacGetUserRoles
      security:
        - bearerAuth: []
        - {}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserRolesEnvelope' }
        '404': { $ref: '#/components/responses/NotFound' }
    put:
      tags: [RBAC]
      summary: Replace roles for user
      description: Replaces all roles for the user with the provided set.
      operationId: rbacReplaceUserRoles
      security:
        - bearerAuth: []
        - {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                roles:
                  type: array
                  items: { type: string }
              required: [roles]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserRolesEnvelope' }
        '400': { description: Bad request }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }

  /rbac/users/{user}/roles/{role}:
    parameters:
      - in: path
        name: user
        required: true
        schema: { type: integer, minimum: 1 }
      - in: path
        name: role
        required: true
        schema: { type: string }
    post:
      tags: [RBAC]
      summary: Attach role
      description: Attaches a role to the user if not already present.
      operationId: rbacAttachUserRole
      security:
        - bearerAuth: []
        - {}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserRolesEnvelope' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
    delete:
      tags: [RBAC]
      summary: Detach role
      description: Detaches a role from the user if present.
      operationId: rbacDetachUserRole
      security:
        - bearerAuth: []
        - {}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserRolesEnvelope' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }

  # ---------------------------
  # Audit
  # ---------------------------
  /audit:
    get:
      tags: [Audit]
      summary: List audit events
      description: Lists audit events with cursor pagination and filters.
      operationId: auditList
      security:
        - bearerAuth: []
        - {}
      parameters:
        - in: query
          name: order
          schema: { type: string, enum: [asc, desc], default: desc }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: cursor
          schema: { type: string }
        - in: query
          name: category
          schema: { type: string }
        - in: query
          name: action
          schema: { type: string }
        - in: query
          name: occurred_from
          schema: { type: string, format: date-time }
        - in: query
          name: occurred_to
          schema: { type: string, format: date-time }
        - in: query
          name: actor_id
          schema: { type: integer }
        - in: query
          name: entity_type
          schema: { type: string }
        - in: query
          name: entity_id
          schema: { type: string }
        - in: query
          name: ip
          schema: { type: string, format: ipv4 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuditListEnvelope' }
        '403': { $ref: '#/components/responses/Forbidden' }

  /audit/categories:
    get:
      tags: [Audit]
      summary: List audit categories
      description: Returns the list of valid audit category enums.
      operationId: auditCategories
      security:
        - bearerAuth: []
        - {}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { type: string }
        '403': { $ref: '#/components/responses/Forbidden' }

  /audit/export.csv:
    get:
      tags: [Audit]
      summary: Export audit events as CSV
      description: Streams a CSV of audit events using current filters when supported.
      operationId: auditExportCsv
      security:
        - bearerAuth: []
        - {}
      responses:
        '200':
          description: CSV
          content:
            text/csv:
              schema:
                type: string
                description: CSV content
        '403': { $ref: '#/components/responses/Forbidden' }

  # ---------------------------
  # Evidence
  # ---------------------------
  /evidence:
    get:
      tags: [Evidence]
      summary: List evidence items
      description: Lists evidence items with filters and cursor pagination.
      operationId: evidenceList
      security:
        - bearerAuth: []
        - {}
      parameters:
        - in: query
          name: order
          schema: { type: string, enum: [asc, desc], default: desc }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
        - in: query
          name: owner_id
          schema: { type: integer }
        - in: query
          name: filename
          schema: { type: string }
        - in: query
          name: mime
          schema: { type: string }
        - in: query
          name: sha256
          schema: { type: string }
        - in: query
          name: sha256_prefix
          schema: { type: string }
        - in: query
          name: version_from
          schema: { type: integer }
        - in: query
          name: version_to
          schema: { type: integer }
        - in: query
          name: created_from
          schema: { type: string, format: date-time }
        - in: query
          name: created_to
          schema: { type: string, format: date-time }
        - in: query
          name: cursor
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/EvidenceListEnvelope' }
        '403': { $ref: '#/components/responses/Forbidden' }
    post:
      tags: [Evidence]
      summary: Upload evidence
      description: Uploads a single evidence file and records metadata.
      operationId: evidenceStore
      security:
        - bearerAuth: []
        - {}
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              additionalProperties: false
              properties:
                file:
                  type: string
                  format: binary
              required: [file]
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/EvidenceCreated' }
        '413': { description: Payload too large }
        '415': { description: Unsupported media type }
        '400': { description: Evidence disabled }
        '403': { $ref: '#/components/responses/Forbidden' }
        '422':
          description: Validation failed
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error422' }

  /evidence/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string }
    get:
      tags: [Evidence]
      summary: Show evidence
      description: Streams the evidence content; supports conditional headers and hash verification.
      operationId: evidenceShow
      security:
        - bearerAuth: []
        - {}
      responses:
        '200':
          description: File content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404': { $ref: '#/components/responses/NotFound' }

  # ---------------------------
  # Exports
  # ---------------------------
  /exports:
    post:
      tags: [Exports]
      summary: Create export job (legacy shape)
      description: Creates an export job with a type in the request body for backward compatibility.
      operationId: exportsCreateLegacy
      security:
        - bearerAuth: []
        - {}
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '201': { description: Created }
        '202':
          description: Accepted (stub-only or queued)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ExportJobAccepted' }
        '403': { $ref: '#/components/responses/Forbidden' }

  /exports/{type}:
    parameters:
      - in: path
        name: type
        required: true
        schema: { type: string, enum: [csv, json, pdf] }
    post:
      tags: [Exports]
      summary: Create export job by type
      description: Creates an export job for a specific artifact type.
      operationId: exportsCreateByType
      security:
        - bearerAuth: []
        - {}
      responses:
        '201': { description: Created }
        '202':
          description: Accepted (stub-only or queued)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ExportJobAccepted' }
        '403': { $ref: '#/components/responses/Forbidden' }

  /exports/{jobId}/status:
    parameters:
      - in: path
        name: jobId
        required: true
        schema: { type: string }
    get:
      tags: [Exports]
      summary: Export job status
      description: Returns the current processing status of an export job.
      operationId: exportsStatus
      security:
        - bearerAuth: []
        - {}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ExportStatusEnvelope' }
        '404': { $ref: '#/components/responses/NotFound' }

  /exports/{jobId}/download:
    parameters:
      - in: path
        name: jobId
        required: true
        schema: { type: string }
    get:
      tags: [Exports]
      summary: Download export artifact
      description: Downloads the completed export artifact when available.
      operationId: exportsDownload
      security:
        - bearerAuth: []
        - {}
      responses:
        '200':
          description: File
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404': { $ref: '#/components/responses/NotFound' }

  # ---------------------------
  # Avatars
  # ---------------------------
  /avatar:
    post:
      tags: [Avatars]
      summary: Upload avatar (webp)
      description: Uploads a WEBP avatar image and queues transcoding into configured sizes.
      operationId: avatarStore
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              additionalProperties: false
              properties:
                file:
                  type: string
                  format: binary
                user_id:
                  type: integer
              required: [file]
      responses:
        '202':
          description: Accepted for processing
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AvatarStoreAccepted' }
        '415': { description: Unsupported media type }
        '422':
          description: Validation failed
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error422' }

  /avatar/{user}:
    parameters:
      - in: path
        name: user
        required: true
        schema: { type: integer, minimum: 1 }
    get:
      tags: [Avatars]
      summary: Get avatar
      description: Returns the WEBP avatar image for the user in the requested size.
      operationId: avatarShow
      responses:
        '200':
          description: Image
          content:
            image/webp:
              schema:
                type: string
                format: binary
        '404': { $ref: '#/components/responses/NotFound' }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: Sanctum PAT

  responses:
    Ok:
      description: OK
      content:
        application/json:
          schema: { $ref: '#/components/schemas/OkEnvelope' }
    Unauthorized:
      description: Unauthorized
    Forbidden:
      description: Forbidden
    NotFound:
      description: Not found

  schemas:
    OkEnvelope:
      type: object
      additionalProperties: false
      properties:
        ok: { type: boolean }
      required: [ok]

    Error422:
      type: object
      additionalProperties: false
      properties:
        ok: { type: boolean }
        code: { type: string }
        errors:
          type: object
          additionalProperties:
            type: array
            items: { type: string }
        message:
          type: string
      required: [errors]

    SettingsEnvelope:
      type: object
      additionalProperties: false
      properties:
        ok: { type: boolean }
        config:
          type: object
          additionalProperties: false
          properties:
            core: { $ref: '#/components/schemas/CoreConfig' }
          required: [core]
      required: [ok, config]

    SettingsPost:
      type: object
      additionalProperties: false
      properties:
        core: { $ref: '#/components/schemas/CoreConfig' }
      required: [core]

    CoreConfig:
      type: object
      additionalProperties: false
      properties:
        rbac:
          type: object
          additionalProperties: false
          properties:
            enabled: { type: boolean }
            require_auth: { type: boolean }
            roles:
              type: array
              items: { type: string }
          required: [enabled, roles]
        audit:
          type: object
          additionalProperties: false
          properties:
            enabled: { type: boolean }
            retention_days:
              type: integer
              minimum: 1
              maximum: 730
          required: [enabled, retention_days]
        evidence:
          type: object
          additionalProperties: false
          properties:
            enabled: { type: boolean }
            max_mb:
              type: integer
              minimum: 1
              maximum: 500
            allowed_mime:
              type: array
              items: { type: string }
          required: [enabled, max_mb, allowed_mime]
        avatars:
          type: object
          additionalProperties: false
          properties:
            enabled: { type: boolean }
            size_px:
              type: integer
              minimum: 32
              maximum: 1024
            format:
              type: string
              enum: [webp]
          required: [enabled, size_px, format]
      required: [rbac, audit, evidence, avatars]

    RoleList:
      type: object
      additionalProperties: false
      properties:
        ok: { type: boolean }
        roles:
          type: array
          items: { type: string }
        note:
          type: string
      required: [ok, roles]

    UserRolesEnvelope:
      type: object
      additionalProperties: false
      properties:
        ok: { type: boolean }
        user:
          type: object
          additionalProperties: false
          properties:
            id: { type: integer }
            name: { type: string }
            email: { type: string, format: email }
          required: [id, name, email]
        roles:
          type: array
          items: { type: string }
      required: [ok, user, roles]

    AuditEvent:
      type: object
      additionalProperties: true
      properties:
        id: { type: string }
        occurred_at: { type: string, format: date-time }
        actor_id:
          type: [integer, 'null']
        action: { type: string }
        category: { type: string }
        entity_type: { type: string }
        entity_id: { type: string }
        ip:
          type: [string, 'null']
        ua:
          type: [string, 'null']
        meta:
          type: ['object', 'null']

    AuditListEnvelope:
      type: object
      additionalProperties: false
      properties:
        ok: { type: boolean }
        note: { type: string }
        _categories:
          type: array
          items: { type: string }
        _retention_days: { type: integer }
        filters:
          type: object
          additionalProperties: true
        items:
          type: array
          items: { $ref: '#/components/schemas/AuditEvent' }
        nextCursor:
          type: ['string', 'null']
      required: [ok, items]

    EvidenceItem:
      type: object
      additionalProperties: true
      properties:
        id: { type: string }
        owner_id: { type: integer }
        name: { type: string }
        filename: { type: string }
        mime: { type: string }
        size: { type: integer }
        size_bytes: { type: integer }
        sha256: { type: string }
        version: { type: integer }
        created_at: { type: string, format: date-time }

    EvidenceListEnvelope:
      type: object
      additionalProperties: false
      properties:
        ok: { type: boolean }
        filters:
          type: object
          additionalProperties: true
        data:
          type: array
          items: { $ref: '#/components/schemas/EvidenceItem' }
        next_cursor:
          type: ['string', 'null']
      required: [ok, data]

    EvidenceCreated:
      type: object
      additionalProperties: false
      properties:
        ok: { type: boolean }
        id: { type: string }
        version: { type: integer }
        sha256: { type: string }
        size: { type: integer }
        mime: { type: string }
        name: { type: string }
      required: [ok, id, version, sha256, size, mime, name]

    ExportJobAccepted:
      type: object
      additionalProperties: false
      properties:
        ok: { type: boolean }
        jobId: { type: string }
        type: { type: string, enum: [csv, json, pdf] }
        params:
          type: object
          additionalProperties: true
        note: { type: string }
      required: [ok, jobId, type]

    ExportStatusEnvelope:
      type: object
      additionalProperties: false
      properties:
        ok: { type: boolean }
        status: { type: string, enum: [queued, running, done, failed] }
      required: [ok, status]

    AvatarStoreAccepted:
      type: object
      additionalProperties: false
      properties:
        ok: { type: boolean }
        note: { type: string }
        queued: { type: boolean }
        file:
          type: object
          properties:
            original_name: { type: string }
            mime: { type: string }
            size_bytes: { type: integer }
            width: { type: integer }
            height: { type: integer }
            format: { type: string }
        target:
          type: object
          properties:
            user_id: { type: integer }
            sizes:
              type: array
              items: { type: integer }
            format: { type: string }
